#!/usr/bin/env ruby
require "bundler/setup"
require "feature-selection"
require "ruby-prof"

datasets = [
  FeatureSelection::Dataset.read_arff("data/wdbc.arff", 0).normalize!,
  FeatureSelection::Dataset.read_arff("data/movement_libras.arff").normalize!,
  FeatureSelection::Dataset.read_arff("data/arrhythmia.arff").normalize!
]

heuristics = {
# "No selection (kNN with all features)" => FeatureSelection::NoSelection,
# "Sequential Forward Selection"         => FeatureSelection::SeqForwardSelection,
# "Sequential Backward Selection"        => FeatureSelection::SeqBackwardSelection,
# "First-descent Local Search"           => FeatureSelection::FirstDescent,
# "Maximum-descent Local Search"         => FeatureSelection::MaximumDescent,
# "Simulated Annealing"                  => FeatureSelection::SimAnnealing,
# "Basic Tabu Search"                    => FeatureSelection::BasicTabuSearch,
# "Complete Tabu Search"                 => FeatureSelection::TabuSearch,
# "Basic Multi-start Search"             => FeatureSelection::BasicMultistart,
# "Iterative Local Search"               => FeatureSelection::IterativeLocalSearch,
# "GRASP"                                => FeatureSelection::Grasp,
# "Generational Genetic"                 => FeatureSelection::GenerationalGenetic,
# "Stationary Genetic"                   => FeatureSelection::StationaryGenetic
}
FeatureSelection::CONFIG.memetic[:models].each do |e|
  gen = e[:generations]
  ratio = e[:population_ratio]
  best = e[:prioritize]
  heuristics["Memetic[#{gen}, #{ratio}, best: #{best}]"] = FeatureSelection::Memetic(gen, ratio, best)
end

ev = FeatureSelection::Evaluator.new folds: 2, repeats: 5

heuristics.each do |name, heuristic|
  fork do # launch a process per heuristic
    datasets.each do |dataset|
      puts "Using #{dataset}."
      puts "", "-" * 80, "|#{name.center(78)}|", "-" * 80
      # RubyProf.start
      evaluation = ev.evaluate heuristic, dataset, csv: true
      # result = RubyProf.stop

      # printer = RubyProf::GraphPrinter.new(result)
      # printer.print(STDOUT, {})

      output = File.new("out/#{dataset.name}_#{heuristic.name}_#{Time.now.xmlschema}.log", "w")
      output << evaluation[:csv]
      output.close

      results = evaluation[:results]
      puts "-" * 80, "Summary".center(80)
      puts "Fitness in training (mean): #{results[:training].reduce(&:+)/results[:training].length}"
      puts "Fitness in test (mean): #{results[:test].reduce(&:+)/results[:test].length}"
      puts "Reduction ratio: #{results[:reduction].reduce(&:+)/results[:reduction].length}"
      puts "Time spent: total #{results[:time].reduce(&:+)}, mean #{results[:time].reduce(&:+)/results[:time].length}"
    end
  end
end

Process.waitall
